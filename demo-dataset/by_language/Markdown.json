{
  "language": "Markdown",
  "samples": [
    {
      "language": "Markdown",
      "file_path": "Scripts/README.md",
      "content": "# GitHub Code Sample Extractor\n\nThis directory contains scripts to extract code samples from a GitHub repository and organize them into a structured dataset.\n\n## Main Script\n\n### `extract_code_samples.py`\n\nThis script traverses a GitHub repository, identifies code files based on their extensions, extracts code samples with metadata, and creates a dataset in various formats.\n\n## Usage\n\n```bash\npython extract_code_samples.py [OPTIONS]\n```\n\n### Options\n\n- `--repo-path PATH`: Path to the repository (default: current directory)\n- `--output DIR`: Output directory for the dataset (default: ./dataset)\n- `--min-lines N`: Minimum number of lines for a code sample (default: 5)\n- `--max-samples N`: Maximum number of samples per language (default: 1000)\n- `--include-dirs DIRS`: Comma-separated list of directories to include (default: all)\n- `--include-langs LANGS`: Comma-separated list of languages to include (default: all)\n- `--exclude-dirs DIRS`: Comma-separated list of additional directories to exclude\n- `--exclude-langs LANGS`: Comma-separated list of languages to exclude\n- `--seed N`: Random seed for reproducibility\n- `--export-format FORMAT`: Export format for the dataset (json, csv, jsonl, or all, default: json)\n\n## Examples\n\n### Basic usage\n\n```bash\npython Scripts/extract_code_samples.py\n```\n\nThis will scan the current repository and create a dataset in the `./dataset` directory.\n\n### Extract only Python and JavaScript files\n\n```bash\npython Scripts/extract_code_samples.py --include-langs Python,JavaScript\n```\n\n### Output in all supported formats\n\n```bash\npython Scripts/extract_code_samples.py --export-format all\n```\n\n### Focus on specific directories\n\n```bash\npython Scripts/extract_code_samples.py --include-dirs src,lib,app\n```\n\n## Output\n\nThe script generates the following:\n\n1. `code_samples_dataset.{json|csv|jsonl}`: The main dataset file in the specified format(s)\n2. `dataset_metadata.json`: Metadata about the extraction process\n3. `by_language/`: Directory containing separate files for each language\n\n## Dataset Structure\n\nEach code sample includes:\n\n- `language`: Detected programming language\n- `file_path`: Relative path to the file\n- `content`: The code content\n- `line_count`: Number of lines of code\n- `code_type`: Type of code (class, function, unknown)\n- `code_name`: Name of the class or function (if detected)\n- `file_size_bytes`: Size of the file in bytes\n- `extraction_timestamp`: When the sample was extracted\n",
      "line_count": 78,
      "code_type": "unknown",
      "code_name": "",
      "file_size_bytes": 2457,
      "extraction_timestamp": "2025-05-11T21:41:20.745945"
    },
    {
      "language": "Markdown",
      "file_path": "Scripts/example_workflow.md",
      "content": "# Example Workflow: Using the Code Extraction Toolkit\n\nThis document demonstrates typical usage patterns for the GitHub code extraction toolkit. Follow these examples to make the most of the tools in various scenarios.\n\n## Basic Usage: Extracting and Analyzing the Current Repository\n\nThe simplest way to use the toolkit is to run the combined script, which extracts code samples and generates an analysis:\n\n```bash\n# On Linux/Mac:\n./Scripts/run_extraction_and_analysis.sh\n\n# On Windows:\nScripts\\run_extraction_and_analysis.bat\n```\n\nThis will:\n1. Extract code samples from the current repository\n2. Save them to the `./dataset` directory\n3. Generate an analysis report at `./dataset/analysis/code_analysis_report.html`\n\n## Advanced Usage: Customizing Extraction Parameters\n\nYou can customize the extraction process with additional parameters:\n\n```bash\n./Scripts/run_extraction_and_analysis.sh \\\n  --repo-path ../another-repository \\\n  --output ./custom-dataset \\\n  --min-lines 10 \\\n  --max-samples 500 \\\n  --export-format all\n```\n\nThis customized command:\n- Extracts from a different repository\n- Saves results to a custom location\n- Only includes files with at least 10 lines\n- Limits to 500 samples per language\n- Exports in all available formats (JSON, CSV, JSONL)\n\n## Scenario 1: Analyzing a New GitHub Project\n\nWhen you want to quickly understand a new project you've cloned:\n\n```bash\n# Clone the repository\ngit clone https://github.com/example/new-project.git\ncd new-project\n\n# Copy the scripts (if not already present)\ncp -r /path/to/Scripts .\n\n# Run the extraction and analysis\n./Scripts/run_extraction_and_analysis.sh\n\n# Open the report in a browser\nopen ./dataset/analysis/code_analysis_report.html  # Mac\n# or\nxdg-open ./dataset/analysis/code_analysis_report.html  # Linux\n# or\nstart ./dataset/analysis/code_analysis_report.html  # Windows\n```\n\n## Scenario 2: Creating a Language-Specific Dataset\n\nIf you only want to extract samples from specific languages:\n\n```bash\npython Scripts/extract_code_samples.py \\\n  --include-langs Python,JavaScript,TypeScript \\\n  --output ./python-js-dataset\n```\n\n## Scenario 3: Running Only the Analysis on an Existing Dataset\n\nIf you already have a dataset and just want to generate or update the analysis:\n\n```bash\npython Scripts/analyze_code_dataset.py \\\n  --dataset ./existing-dataset \\\n  --output ./existing-dataset/new-analysis\n```\n\n## Scenario 4: Extracting Code for Machine Learning Training\n\nWhen preparing a dataset for machine learning:\n\n```bash\npython Scripts/extract_code_samples.py \\\n  --min-lines 20 \\\n  --max-samples 5000 \\\n  --output ./training-data \\\n  --export-format jsonl\n```\n\n## Scenario 5: Creating Comparative Analysis of Multiple Repositories\n\nTo compare multiple repositories:\n\n```bash\n# Extract from first repository\n./Scripts/run_extraction_and_analysis.sh \\\n  --repo-path ./repo1 \\\n  --output ./comparison/repo1\n\n# Extract from second repository\n./Scripts/run_extraction_and_analysis.sh \\\n  --repo-path ./repo2 \\\n  --output ./comparison/repo2\n\n# Now manually compare the analysis reports\n```\n\n## Troubleshooting\n\nIf you encounter issues with the extraction process:\n\n1. Check that Python 3.6+ is installed and accessible\n2. Ensure dependencies are installed: `pip install -r Scripts/requirements.txt`\n3. For visualization problems, confirm matplotlib, pandas, and seaborn are installed\n4. For permission errors, make sure scripts are executable: `chmod +x Scripts/*.sh`\n",
      "line_count": 123,
      "code_type": "unknown",
      "code_name": "",
      "file_size_bytes": 3441,
      "extraction_timestamp": "2025-05-11T21:41:20.746546"
    }
  ]
}